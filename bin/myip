#!/usr/bin/env node
//
// Show my local and external IP addresses.
//
// - Show both local and external IP:
//
// `myip`
//
// - Show local IP:
//
// `myip l`
//
// - Show external (public) IP:
//
// `myip g`
//
// ---
// Author: Nick Plekhanov, https://plekhanov.me
// License: MIT
// https://github.com/nicksp/dotfiles

const { execSync } = require('node:child_process')
const https = require('node:https')
const os = require('node:os')

function getLocalIP() {
  return Object.values(os.networkInterfaces())
    .flat()
    .filter((details) => details.family === 'IPv4' && !details.internal)
    .map((details) => details.address)[0]
}

function getExternalIP() {
  return new Promise((resolve, reject) => {
    https
      .get('https://icanhazip.com/', (res) => {
        if (res.statusCode !== 200) {
          reject(`${res.statusCode} error from upstream`)
          return
        }
        res.on('data', (chunk) => {
          resolve(chunk.toString().trim())
        })
      })
      .on('error', reject)
  })
}

async function main() {
  const args = process.argv.slice(2)
  const wantsLocal = args.includes('local') || args.includes('l')
  const wantsGlobal = args.includes('global') || args.includes('g')
  const wantsBoth =
    args.includes('gl') || args.includes('lg') || (wantsLocal && wantsGlobal)

  if (wantsBoth || (!wantsLocal && !wantsGlobal)) {
    console.log('local:', getLocalIP())
    console.log('external:', await getExternalIP())
  } else if (wantsLocal) {
    console.log(getLocalIP())
  } else if (wantsGlobal) {
    console.log(await getExternalIP())
  }
}

main().catch(console.error)
