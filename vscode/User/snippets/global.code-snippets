{
  "🦆 console.log()": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "cl",
    "body": [
      "console.log('${1|🦀,🦜,🌭,🐷,🦆,🌮,🍟,🌽,🥐,🫒,🍪,🚀,🎉,💪,🤷‍♂️,🕵️‍♂️,🛳️,🐙,🍄,🐴|}', $2)",
      "$0",
    ],
    "description": "Log output to console",
  },
  "🦆 spaced console.log()": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "scl",
    "body": [
      "console.log('**************************************************************************\\\\n\\\\n\\\\n')",
      "console.log($0)",
      "console.log('\\\\n\\\\n\\\\n**************************************************************************')",
    ],
  },
  "React function component": {
    "scope": "typescriptreact",
    "prefix": "rfc",
    "body": [
      "type ${TM_FILENAME_BASE/^([a-z])|[\\-](\\w)/${1:/upcase}${2:/upcase}/g}Props = Readonly<{",
      "  $1",
      "}>",
      "",
      "function ${TM_FILENAME_BASE/^([a-z])|[\\-](\\w)/${1:/upcase}${2:/upcase}/g}({ $2 }: ${TM_FILENAME_BASE/^([a-z])|[\\-](\\w)/${1:/upcase}${2:/upcase}/g}Props) {",
      "  return ${0:<></>}",
      "}",
      "",
      "export { ${TM_FILENAME_BASE/^([a-z])|[\\-](\\w)/${1:/upcase}${2:/upcase}/g} }",
    ],
    "description": "Template of a new React functional component with TypeScript",
  },
  "React useState": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "us",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState(${2:default${1/(.*)/${1:/capitalize}/}})",
    ],
  },
  "React useEffect": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "ue",
    "body": ["useEffect(() => {", "  $1", "}, [$2])$0"],
  },
  "React useCallback": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "uc",
    "body": ["useCallback(() => {", "  $1", "}, [$2])$0"],
  },
  "React useMemo": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "um",
    "body": ["useMemo(() => {", "  $1", "}, [$2])$0"],
  },
  "beforeEach test": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "be",
    "body": ["beforeEach(() => {", "  $1", "})"],
  },
  "afterEach test": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ae",
    "body": ["afterEach(() => {", "  $1", "})"],
  },
  "describe test": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "desc",
    "body": ["describe('${1:description}', () => {", "  $0", "})"],
  },
  "it test": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "it",
    "body": ["it('${1:description}', () => {", "  $0", "})"],
  },
  "import": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "im",
    "body": ["import { $1 } from '$2';"],
    "description": "Import a module",
  },
  "import React from 'react'": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "impr",
    "body": "import * as React from 'react'",
  },
  "throw log": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "tl",
    "body": "throw new Error(JSON.stringify($0, null, 2))",
  },
}
